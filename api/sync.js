const db = require('./database')
const Logger = require('./logger')
const logger = new Logger('app')
const fm = require('./fileManager')
const DEFAULT_BOARDS = require('../app').DEFAULT_BOARDS

const tables = {
    BOARD : 'board'
}
exports.tables = tables

async function checkTableExists(table) {
    try {
        let q = await db.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE  table_schema = 'public'
                AND    table_name   = '${table}'
            );
        `)
        return (q[0] && q[0].exists === true)

    } catch (err) { 
        logger.error('Error after check table')
    }
    return false
}

;(async() => {
    if (await checkTableExists(tables.BOARD) === false) {
        try {
            await db.query(`
                CREATE TABLE ${tables.BOARD} (
                    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name varchar(200) NOT NULL,
                    path varchar(100) NOT NULL,
                    date timestamp DEFAULT current_timestamp
                );
            `)
            logger.ok('Table: board, successful created!')
        } catch (err) {
            logger.fatal('Error after create \'board\' table', err)
        }
    }

    try {
        for (b of DEFAULT_BOARDS) {
            let q = await db.query(`SELECT path FROM ${tables.BOARD} WHERE path = $1`, [b.path])
            if (!q[0] || !q[0].path) {
                await db.query(`INSERT INTO ${tables.BOARD}(name, path) VALUES ($1, $2)`, [b.name, b.path])
                logger.ok(`* New board created: ${b.name} with path: ${b.path}`)
            }
        }
    } catch (err) {
        logger.error('Error after insert default boards')
    }

    fm.updateFileSystem(tables.BOARD)
})()